// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CK.Ais.Net.Specs
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("NmeaTagBlockParserSpecs")]
    public partial class NmeaTagBlockParserSpecsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "NmeaTagBlockParserSpecs.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "NmeaTagBlockParserSpecs", "\tIn order to process AIS messages in NMEA files\r\n\tAs a developer\r\n\tI want the Nme" +
                    "aTagBlockParser to be able to parse a NMEA tag block from an NMEA file", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unspecified standard tag block")]
        [NUnit.Framework.TestCaseAttribute("s:ASS,c:1706745485*72", "ASS", "1706745485", null)]
        [NUnit.Framework.TestCaseAttribute("s:AIS,c:1706800491*63", "AIS", "1706800491", null)]
        public void UnspecifiedStandardTagBlock(string payload, string source, string timestamp, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("source", source);
            argumentsOfScenario.Add("timestamp", timestamp);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unspecified standard tag block", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 16
 testRunner.When(string.Format("I parse \'{0}\' with throwWhenTagBlockContainsUnknownFields of false and tagBlockSt" +
                            "andard of 0 as a NMEA tag block parser", payload), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.Then(string.Format("the Source is \'{0}\'", source), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
 testRunner.And(string.Format("the Timestamp is \'{0}\'", timestamp), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And("the SentenceGrouping is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unspecified standard tag block with group")]
        [NUnit.Framework.TestCaseAttribute("g:1-2-7764,s:AIS,c:1706800480*13", "AIS", "1706800480", "1", "2", "7764", null)]
        [NUnit.Framework.TestCaseAttribute("1G2:7764,s:AIS,c:1706800480*33", "AIS", "1706800480", "1", "2", "7764", null)]
        public void UnspecifiedStandardTagBlockWithGroup(string payload, string source, string timestamp, string sentence, string total, string groupid, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("source", source);
            argumentsOfScenario.Add("timestamp", timestamp);
            argumentsOfScenario.Add("sentence", sentence);
            argumentsOfScenario.Add("total", total);
            argumentsOfScenario.Add("groupid", groupid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unspecified standard tag block with group", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 27
 testRunner.When("I parse \'g:1-2-7764,s:AIS,c:1706800480*13\' with throwWhenTagBlockContainsUnknownF" +
                        "ields of false and tagBlockStandard of 0 as a NMEA tag block parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
 testRunner.Then(string.Format("the Source is \'{0}\'", source), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
 testRunner.And(string.Format("the Timestamp is \'{0}\'", timestamp), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And(string.Format("the SentenceGrouping is {0} {1} {2}", sentence, total, groupid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("IEC tag block single line")]
        [NUnit.Framework.TestCaseAttribute("s:ASS,c:1706745485*72", "ASS", "1706745485", null)]
        [NUnit.Framework.TestCaseAttribute("s:AIS,c:1706800491*63", "AIS", "1706800491", null)]
        public void IECTagBlockSingleLine(string payload, string source, string timestamp, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("source", source);
            argumentsOfScenario.Add("timestamp", timestamp);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("IEC tag block single line", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 38
 testRunner.When(string.Format("I parse \'{0}\' with throwWhenTagBlockContainsUnknownFields of false and tagBlockSt" +
                            "andard of 1 as a NMEA tag block parser", payload), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
 testRunner.Then(string.Format("the Source is \'{0}\'", source), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
 testRunner.And(string.Format("the Timestamp is \'{0}\'", timestamp), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.And("the SentenceGrouping is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("IEC tag block single line with group")]
        public void IECTagBlockSingleLineWithGroup()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("IEC tag block single line with group", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 49
 testRunner.When("I parse \'1G2:7764,s:AIS,c:1706800480*13\' with throwWhenTagBlockContainsUnknownFie" +
                        "lds of false and tagBlockStandard of 1 as a NMEA tag block parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
 testRunner.Then("the Source is \'AIS\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
 testRunner.And("the Timestamp is \'1706800480\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.And("the SentenceGrouping is 1 2 7764", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("IEM tag block but Nmea group")]
        public void IEMTagBlockButNmeaGroup()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("IEM tag block but Nmea group", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 55
 testRunner.Given("the line \'\\g:1-2-9628,s:AIS,c:1701650788*13\\!AIVDM,2,1,2,B,55Mv3A`00001L=SKOG9@tl" +
                        "mV0F2222222222220l189446lgN5j3mDm3kc56,0*4E\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 56
 testRunner.When("I parse the content by message with throwWhenTagBlockContainsUnknownFields of fal" +
                        "se and tagBlockStandard of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
 testRunner.Then("the message error report 0 should include the error message \'Tag block sentence g" +
                        "rouping should be <int>G<int>:<int>, but first part was not a decimal integer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Nmea tag block single line")]
        [NUnit.Framework.TestCaseAttribute("s:ASS,c:1706745485*72", "ASS", "1706745485", null)]
        [NUnit.Framework.TestCaseAttribute("s:AIS,c:1706800491*63", "AIS", "1706800491", null)]
        public void NmeaTagBlockSingleLine(string payload, string source, string timestamp, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("source", source);
            argumentsOfScenario.Add("timestamp", timestamp);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Nmea tag block single line", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 60
 testRunner.When(string.Format("I parse \'{0}\' with throwWhenTagBlockContainsUnknownFields of false and tagBlockSt" +
                            "andard of 2 as a NMEA tag block parser", payload), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
 testRunner.Then(string.Format("the Source is \'{0}\'", source), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
 testRunner.And(string.Format("the Timestamp is \'{0}\'", timestamp), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.And("the SentenceGrouping is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Nmea tag block single line with group")]
        public void NmeaTagBlockSingleLineWithGroup()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Nmea tag block single line with group", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 71
 testRunner.When("I parse \'g:1-2-7764,s:AIS,c:1706800480*13\' with throwWhenTagBlockContainsUnknownF" +
                        "ields of false and tagBlockStandard of 2 as a NMEA tag block parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
 testRunner.Then("the Source is \'AIS\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
 testRunner.And("the Timestamp is \'1706800480\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.And("the SentenceGrouping is 1 2 7764", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Nmea tag block but IEC group")]
        public void NmeaTagBlockButIECGroup()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Nmea tag block but IEC group", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 76
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 77
 testRunner.Given("the line \'\\1G2:9628,s:AIS,c:1701650788*13\\!AIVDM,2,1,2,B,55Mv3A`00001L=SKOG9@tlmV" +
                        "0F2222222222220l189446lgN5j3mDm3kc56,0*4E\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 78
 testRunner.When("I parse the content by message with throwWhenTagBlockContainsUnknownFields of fal" +
                        "se and tagBlockStandard of 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 79
 testRunner.Then("the message error report 0 should include the error message \'Tag block sentence g" +
                        "rouping should be <int>-<int>-<int>, but first part was not a decimal integer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("IEC tag block TextString")]
        [NUnit.Framework.TestCaseAttribute("c:1673149953,i:<O>ES</O>*1F", "<O>ES</O>", null)]
        [NUnit.Framework.TestCaseAttribute("c:1673149955,i:<O>GI</O>*01", "<O>GI</O>", null)]
        public void IECTagBlockTextString(string payload, string text, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("text", text);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("IEC tag block TextString", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 82
 testRunner.When(string.Format("I parse \'{0}\' with throwWhenTagBlockContainsUnknownFields of false and tagBlockSt" +
                            "andard of 1 as a NMEA tag block parser", payload), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
  testRunner.Then(string.Format("the TextString is \'{0}\'", text), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Nmea tag block TextString")]
        [NUnit.Framework.TestCaseAttribute("c:1673149951,t:<O>ES</O>*00", "<O>ES</O>", null)]
        [NUnit.Framework.TestCaseAttribute("c:1673149954,t:<O>RO</O>*0E", "<O>RO</O>", null)]
        public void NmeaTagBlockTextString(string payload, string text, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("text", text);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Nmea tag block TextString", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 91
 testRunner.When(string.Format("I parse \'{0}\' with throwWhenTagBlockContainsUnknownFields of false and tagBlockSt" +
                            "andard of 2 as a NMEA tag block parser", payload), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 92
  testRunner.Then(string.Format("the TextString is \'{0}\'", text), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("IEC tag block TextString but Nmea TextString")]
        public void IECTagBlockTextStringButNmeaTextString()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("IEC tag block TextString but Nmea TextString", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 99
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 100
 testRunner.Given("the line \'\\c:1673149951,t:<O>ES</O>*00\\!AIVDM,2,1,2,B,55Mv3A`00001L=SKOG9@tlmV0F2" +
                        "222222222220l189446lgN5j3mDm3kc56,0*4E\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 101
 testRunner.When("I parse the content by message with throwWhenTagBlockContainsUnknownFields of fal" +
                        "se and tagBlockStandard of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
 testRunner.Then("the message error report 0 should include the error message \'Unknown field type i" +
                        "n IEC tag block: t\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Nmea tag block TextString but IEC TextString")]
        public void NmeaTagBlockTextStringButIECTextString()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Nmea tag block TextString but IEC TextString", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 104
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 105
 testRunner.Given("the line \'\\c:1673149953,i:<O>ES</O>*1F\\!AIVDM,2,1,2,B,55Mv3A`00001L=SKOG9@tlmV0F2" +
                        "222222222220l189446lgN5j3mDm3kc56,0*4E\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 106
 testRunner.When("I parse the content by message with throwWhenTagBlockContainsUnknownFields of fal" +
                        "se and tagBlockStandard of 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 107
 testRunner.Then("the message error report 0 should include the error message \'Unknown field type i" +
                        "n Nmea tag block: i\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Nmea tag block Extra Fields but no parser")]
        public void NmeaTagBlockExtraFieldsButNoParser()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Nmea tag block Extra Fields but no parser", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 110
  testRunner.Given("the line \'\\s:KIN1B,c:1716810431,q:mt-pt-ct-st-kt*78\\!AIVDM,1,1,,B,100BkthL2fmlG@@" +
                        "iC=w2CQfF0Gh8,0*38\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 111
 testRunner.When("I parse the content by message with throwWhenTagBlockContainsUnknownFields of tru" +
                        "e and tagBlockStandard of 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 112
 testRunner.Then("the message error report 0 should include the error message \'Unknown field type: " +
                        "q\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Nmea tag block Extra Fields with extra parser")]
        [NUnit.Framework.TestCaseAttribute("s:KIN1B,c:1716810431,q:mt-pt-ct-st-kt*78", "mt-pt-ct-st-kt", "", null)]
        [NUnit.Framework.TestCaseAttribute("s:KIN1B,c:1716810431,q:mt-pt-ct-st-kt,v:123*28", "mt-pt-ct-st-kt", "123", null)]
        public void NmeaTagBlockExtraFieldsWithExtraParser(string payload, string qvalue, string vvalue, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("qvalue", qvalue);
            argumentsOfScenario.Add("vvalue", vvalue);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Nmea tag block Extra Fields with extra parser", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 114
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 115
 testRunner.When(string.Format("I parse \'{0}\' with throwWhenTagBlockContainsUnknownFields of true, tagBlockStanda" +
                            "rd of 0 and extra parser", payload), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
  testRunner.Then(string.Format("the extra field parser q value is \'{0}\'", qvalue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
  testRunner.And(string.Format("the extra field parser v value is \'{0}\'", vvalue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Allow tag block empty fields")]
        [NUnit.Framework.TestCaseAttribute("c:,i:,t:,d:,n:,r:,x:,s:*21", null)]
        [NUnit.Framework.TestCaseAttribute("s:,i:,t:,d:,n:,r:,x:,c:*21", null)]
        [NUnit.Framework.TestCaseAttribute("s:,c:,t:,d:,n:,r:,x:,i:*21", null)]
        [NUnit.Framework.TestCaseAttribute("s:,c:,i:,d:,n:,r:,x:,t:*21", null)]
        [NUnit.Framework.TestCaseAttribute("s:,c:,i:,t:,n:,r:,x:,d:*21", null)]
        [NUnit.Framework.TestCaseAttribute("s:,c:,i:,t:,d:,r:,x:,n:*21", null)]
        [NUnit.Framework.TestCaseAttribute("s:,c:,i:,t:,d:,n:,x:,r:*21", null)]
        [NUnit.Framework.TestCaseAttribute("s:,c:,i:,t:,d:,n:,r:,x:*21", null)]
        public void AllowTagBlockEmptyFields(string payload, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Allow tag block empty fields", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 124
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 125
    testRunner.When(string.Format("I parse \'{0}\' with allowTagBlockEmptyFields of true and throwWhenTagBlockContains" +
                            "UnknownFields of false", payload), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 126
    testRunner.Then("there are no error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 127
    testRunner.And("the Source is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
    testRunner.And("the Timestamp is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 129
    testRunner.And("the TextString is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
    testRunner.And("the SentenceGrouping is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Allow tag block empty fields but invlid field")]
        [NUnit.Framework.TestCaseAttribute("c:,i:,t:,d:,n:,r:,x:,s*21", null)]
        [NUnit.Framework.TestCaseAttribute("s:,i:,t:,d:,n:,r:,x:,c*21", null)]
        [NUnit.Framework.TestCaseAttribute("s:,c:,t:,d:,n:,r:,x:,i*21", null)]
        [NUnit.Framework.TestCaseAttribute("s:,c:,i:,d:,n:,r:,x:,t*21", null)]
        [NUnit.Framework.TestCaseAttribute("s:,c:,i:,t:,n:,r:,x:,d*21", null)]
        [NUnit.Framework.TestCaseAttribute("s:,c:,i:,t:,d:,r:,x:,n*21", null)]
        [NUnit.Framework.TestCaseAttribute("s:,c:,i:,t:,d:,n:,x:,r*21", null)]
        [NUnit.Framework.TestCaseAttribute("s:,c:,i:,t:,d:,n:,r:,x*21", null)]
        [NUnit.Framework.TestCaseAttribute("s,c:,i:,t:,d:,n:,r:,x:*21", null)]
        [NUnit.Framework.TestCaseAttribute("c,s:,i:,t:,d:,n:,r:,x:*21", null)]
        [NUnit.Framework.TestCaseAttribute("i,s:,c:,t:,d:,n:,r:,x:*21", null)]
        [NUnit.Framework.TestCaseAttribute("t,s:,c:,i:,d:,n:,r:,x:*21", null)]
        [NUnit.Framework.TestCaseAttribute("d,s:,c:,i:,t:,n:,r:,x:*21", null)]
        [NUnit.Framework.TestCaseAttribute("n,s:,c:,i:,t:,d:,r:,x:*21", null)]
        [NUnit.Framework.TestCaseAttribute("r,s:,c:,i:,t:,d:,n:,x:*21", null)]
        [NUnit.Framework.TestCaseAttribute("x,s:,c:,i:,t:,d:,n:,r:*21", null)]
        public void AllowTagBlockEmptyFieldsButInvlidField(string payload, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Allow tag block empty fields but invlid field", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 143
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 144
    testRunner.When(string.Format("I parse \'{0}\' with allowTagBlockEmptyFields of true and throwWhenTagBlockContains" +
                            "UnknownFields of false", payload), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 145
    testRunner.Then("the parser throw an error message \'Tag block entries should start with a type cha" +
                        "racter followed by a colon, and there was no colon\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Disallow tag block empty fields")]
        [NUnit.Framework.TestCaseAttribute("s:*49", null)]
        [NUnit.Framework.TestCaseAttribute("c:*59", null)]
        [NUnit.Framework.TestCaseAttribute("i:*53", null)]
        [NUnit.Framework.TestCaseAttribute("t:*4E", null)]
        [NUnit.Framework.TestCaseAttribute("d:*5E", null)]
        [NUnit.Framework.TestCaseAttribute("n:*54", null)]
        [NUnit.Framework.TestCaseAttribute("r:*48", null)]
        [NUnit.Framework.TestCaseAttribute("x:*42", null)]
        [NUnit.Framework.TestCaseAttribute("s*49", null)]
        [NUnit.Framework.TestCaseAttribute("c*59", null)]
        [NUnit.Framework.TestCaseAttribute("i*53", null)]
        [NUnit.Framework.TestCaseAttribute("t*4E", null)]
        [NUnit.Framework.TestCaseAttribute("d*5E", null)]
        [NUnit.Framework.TestCaseAttribute("n*54", null)]
        [NUnit.Framework.TestCaseAttribute("r*48", null)]
        [NUnit.Framework.TestCaseAttribute("x*42", null)]
        public void DisallowTagBlockEmptyFields(string payload, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Disallow tag block empty fields", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 166
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 167
    testRunner.When(string.Format("I parse \'{0}\' with allowTagBlockEmptyFields of false and throwWhenTagBlockContain" +
                            "sUnknownFields of false", payload), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 168
    testRunner.Then("the parser throw an error message \'Tag block entries should start with a type cha" +
                        "racter followed by a colon, and there was no colon\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Group field is the last of the tag block")]
        public void GroupFieldIsTheLastOfTheTagBlock()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Group field is the last of the tag block", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 189
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 190
    testRunner.When("I parse \'i:<O>IRL</O>,c:1738367940,g:2-2-1470*2F\' with allowTagBlockEmptyFields o" +
                        "f true and throwWhenTagBlockContainsUnknownFields of false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 191
    testRunner.Then("the TextString is \'<O>IRL</O>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 192
 testRunner.And("the Timestamp is \'1738367940\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 193
 testRunner.And("the SentenceGrouping is 2 2 1470", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 194
    testRunner.And("no error message reported", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Group field is the last of the tag block throw an error when allowTagBlockEmptyFi" +
            "elds is false")]
        public void GroupFieldIsTheLastOfTheTagBlockThrowAnErrorWhenAllowTagBlockEmptyFieldsIsFalse()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Group field is the last of the tag block throw an error when allowTagBlockEmptyFi" +
                    "elds is false", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 196
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 197
    testRunner.When("I parse \'i:<O>IRL</O>,c:1738367940,g:2-2-1470*2F\' with allowTagBlockEmptyFields o" +
                        "f false and throwWhenTagBlockContainsUnknownFields of false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 198
    testRunner.Then("the TextString is \'<O>IRL</O>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 199
 testRunner.And("the Timestamp is \'1738367940\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
 testRunner.And("the SentenceGrouping is 2 2 1470", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 201
    testRunner.And("no error message reported", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
